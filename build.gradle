plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'antlr'
}

group = 'smartquery'
version = '0.0.1-SNAPSHOT'
description = 'SmartQuery'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // ANTLR4 for SQL parsing
    antlr 'org.antlr:antlr4:4.13.1'
    implementation 'org.antlr:antlr4-runtime:4.13.1'
    
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    
    // Kafka client
    implementation 'org.apache.kafka:kafka-clients:3.5.1'
    
    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    
    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

application {
    mainClass = 'smartquery.SmartQueryApplication'
}

// Configure console input for the run task
tasks.named('run') {
    standardInput = System.in
}

// Additional tasks for development
tasks.register('runTests') {
    group = 'verification'
    description = 'Run all tests with detailed output'
    dependsOn test
}

// JVM arguments for better performance during development
tasks.named('bootRun') {
    jvmArgs = [
        '-XX:+UseZGC',
        '-Xmx2g',
        '-Dspring.profiles.active=dev'
    ]
}

// ANTLR4 configuration
generateGrammarSource {
    outputDirectory = file("src/main/java")
    arguments += ["-visitor", "-listener", "-package", "smartquery.query"]
}
